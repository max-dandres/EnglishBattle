@page
@model EnglishBattle.Web.Pages.EnglishBattleModel

@using System.Text.Json
@using EnglishBattle.Web.Resources

@{
}

<input type="hidden" id="userId" asp-for="@Model.UserID" />
<input type="hidden" id="gameId" asp-for="@Model.GameID" />

<div class="row justify-content-center">
    <div class="col-md-4 col-sm-12 text-center">
        <div class="card border-secondary">

            @*Timer*@
            <div id="timer" class="card-header">

                @{
                    await Html.RenderPartialAsync("_TimerPartial");
                }

            </div>

            <div class="card-body">
                @*Score*@
                <div class="row">
                    <div class="col">
                        <h3>Score: <span id="score">0</span></h3>
                    </div>
                </div>
                @*BaseForm*@
                <div class="row">
                    <div class="col py-0 pb-2">

                        <div id="hints" class="overflow-hidden pb-md-2 pb-sm-1"></div>

                        <div class="input-icons">
                            @*<i id="success_icon" class="fas fa-check icon success"></i>
                            <i id="failure_icon" class="fas fa-times icon error"></i>*@
                            <input ID="baseForm" runat="server" placeholder="@Game.BaseForm" class="form-control" disabled/>
                        </div>

                    </div>
                </div>
                @*PastPrinciple*@
                <div class="row">

                    <div class="col pb-2">
                        <input ID="pastParticiple" runat="server" placeholder="@Game.PastParticiple" class="form-control" autocomplete="off" disabled/>
                    </div>

                </div>
                @*Preterit*@
                <div class="row">

                    <div class="col pb-2">
                        <input ID="pastSimple" runat="server" placeholder="@Game.PastSimple" class="form-control" autocomplete="off" disabled />
                    </div>

                </div>
            </div>

            <div class="card-footer">
                @*Button*@
                <div class="row">
                    <div class="col">

                        <button id="playButton" class="btn btn-success" type="button">Chargement</button>

                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-4">

                        <div class="form-check form-switch" style="width: 100px;">
                            <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                            <label class="form-check-label" for="flexSwitchCheckDefault">Infinite</label>
                        </div>

                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/b144ade453.js" crossorigin="anonymous"></script>
    <script src="~/js/timer.js"></script>
    <script src="~/js/englishbattle.js"></script>

    <script type="text/javascript">

        const _irregularVerbs = @Json.Serialize(Model.IrregularVerbs);

        const _timer = new Timer(60);
        const _game = new EnglishBattle(@Model.GameID, _irregularVerbs);

        $(document).ready(function () {
            $("#success_icon").hide();
            $("#failure_icon").hide();

            const _gameId = parseInt($("#gameId").val());

            // References to game's html elements
            const _baseFormInput = $("#baseForm");
            const _pastSimpleInput = $("#pastSimple");
            const _pastParticipleInput = $("#pastParticiple");
            const _hintListDiv = $("#hints");
            const _scoreSpan = $("#score");

            // Irregular verb currently displayed
            var _currentVerb = null;
            var _score = 0;

            /*
                Play button click event
            */
            $("#playButton").click(function () {

                $(this).attr("disabled", true);

                enableInputs(true);

                _game.NewGame(_timer.getTimeStamp());
                _timer.start(timeOutHandler);

                _currentVerb = _game.GetNextVerb();
                var hints = _game.GetHints();

                displayNextVerb(_currentVerb.baseForm);

                for (let hint of hints) {
                    displayNextHint(hint);
                }
            });

            /*
                Keypress "Enter" event
            */
            $(document).keypress(function () {
                let pastSimpleVal = _pastSimpleInput.val();
                let pastParticipleVal = _pastParticipleInput.val();

                if (event.key == "Enter") {
                    let isEmpty = pastSimpleVal != "" && pastParticipleVal != "";

                    if (_game.IsValidAnswer(pastSimpleVal, pastParticipleVal)) {
                        _scoreSpan.html(++_score);
                        _timer.addSeconds(3);
                        _baseFormInput.addClass("is-valid").removeClass("is-invalid");
                    }
                    else {
                        _timer.addSeconds(-1);
                        _baseFormInput.addClass("is-invalid").removeClass("is-valid");
                    }

                    _game.PostAnswer(pastSimpleVal, pastParticipleVal, _timer.getTimeStamp());

                    _currentVerb = _game.GetNextVerb();

                    displayNextVerb(_currentVerb.baseForm);
                    displayNextHint(_game.GetNextHint());
                }
            });

            $("#pastSimple, #pastParticiple").focus(function () {
                // Disable errors
                //baseFormInput.delay(300).removeClass("is-invalid").removeClass("is-valid");
            });

            $("#pastSimple, #pastParticiple").keypress(function () {
                // Disable errors
                //baseFormInput.delay(300).removeClass("is-invalid").removeClass("is-valid");
            });

            function enableInputs(enable) {
                _pastParticipleInput.attr("disabled", !enable);
                _pastSimpleInput.attr("disabled", !enable);
            }

            function displayNextHint(hint) {
                let hintToPrepend = `<div class="" style="opacity: 0.3;">${hint}</div>`;

                $(hintToPrepend).hide().prependTo(_hintListDiv).fadeIn();
            }

            function displayNextVerb(verb) {
                _baseFormInput.val(verb);
                _pastSimpleInput.val("");
                _pastParticipleInput.val("").focus();
            }

            function timeOutHandler() {
                enableInputs(false);
                console.log("timeout");
            }

        });

    </script>

}