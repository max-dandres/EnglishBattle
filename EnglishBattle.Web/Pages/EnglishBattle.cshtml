@page
@model EnglishBattle.Web.Pages.EnglishBattleModel

@using System.Text.Json
@using EnglishBattle.Web.Resources

@{
}

@section Stylesheets {
    <link rel="stylesheet" href="~/css/spinner.css" asp-append-version="true" />
}

    <input type="hidden" id="userId" asp-for="@Model.UserID" />
    @*<input type="hidden" id="gameId" asp-for="@Model.GameID" />*@

    <div class="row justify-content-center">
        <div class="col-lg-4 col-md-6 col-sm-8 col-xs-8 text-center">
            <div class="card border-secondary">

                @*Timer*@
                <div id="timer" class="card-header">

                    <div class="row align-items-center">
                        <div class="col">
                        </div>

                        <div class="col text-center" style="width: 164px;">
                            @{
                            await Html.RenderPartialAsync("_TimerPartial");
                        }
                    </div>

                    <div class="col" style="text-align: left;">
                        <span id="timeBonus"></span>
                    </div>
                </div>

            </div>

            <div class="card-body">
                @*Score*@
                <div class="row">
                    <div class="col">
                        <h3>Score: <span id="score">0</span></h3>
                    </div>
                </div>
                @*BaseForm*@
                <div class="row">
                    <div class="col py-0 pb-2">

                        <div id="hints" class="overflow-hidden pb-md-2 pb-sm-1"></div>

                        <div class="input-icons">
                            @*<i id="success_icon" class="fas fa-check icon success"></i>
                            <i id="failure_icon" class="fas fa-times icon error"></i>*@
                            <input ID="baseForm" runat="server" placeholder="@Game.BaseForm" class="form-control" disabled />
                        </div>

                    </div>
                </div>
                @*PastPrinciple*@
                <div class="row">

                    <div class="col pb-2">
                        <input ID="pastParticiple" runat="server" placeholder="@Game.PastParticiple" class="form-control" autocomplete="off" disabled />
                    </div>

                </div>
                @*Preterit*@
                <div class="row">

                    <div class="col pb-2">
                        <input ID="pastSimple" runat="server" placeholder="@Game.PastSimple" class="form-control" autocomplete="off" disabled />
                    </div>

                </div>
            </div>

            <div class="card-footer">
                @*Button*@
                <div class="row">
                    <div class="col">

                        <button id="playButton" class="btn btn-success" type="button">

                            <span>@Game.Start</span>

                        </button>

                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    @*<script src="https://kit.fontawesome.com/b144ade453.js" crossorigin="anonymous"></script>*@
    <script src="~/js/timer.js"></script>
    <script src="~/js/englishbattle.js"></script>

    <script type="text/javascript">

        const _irregularVerbs = @Json.Serialize(Model.IrregularVerbs);

        const _timer = new Timer(60);
        const _game = new EnglishBattle(@Model.UserID);

        const _timeBonus = 3;
        const _timePenalty = -3;

        $(document).ready(function () {
            $("#timeBonus").hide();

            // References to game's html elements
            const _baseFormInput = $("#baseForm");
            const _pastSimpleInput = $("#pastSimple");
            const _pastParticipleInput = $("#pastParticiple");
            const _playButton = $("#playButton");
            const _hintListDiv = $("#hints");
            const _scoreSpan = $("#score");

            // Irregular verb currently displayed
            var _currentVerb = null;
            var _score = 0;

            /*
                Play button click event
            */
            _playButton.click(function () {

                _hintListDiv.animate({ "height": "4.75em" }, "slow");

                $.when(

                    ajax_newGame(),
                    ajax_getIrregularVerbs()

                ).done(function () {
                    enableInputs(true);

                    _playButton.attr("disabled", true);
                    _playButton.html(
                        `<div class='spinner'>
                                                        <div class='spinner-dot-1'></div>
                                                        <div class='spinner-dot-2'></div>
                                                    </div>
                                                    &nbsp;
                                                    <span>@Game.InProgess</span>`
                    );

                    _timer.start(timeOutHandler);
                    _game.inProgress = true;
                    _currentVerb = _game.GetNextVerb();

                    displayNextVerb(_currentVerb.baseForm);

                    let hints = _game.GetHints();

                    for (let hint of hints) {
                        displayNextHint(hint);
                    }

                });
            });

            /*
                Keypress "Enter" event
            */
            $(document).keypress(function () {
                let pastSimpleVal = _pastSimpleInput.val();
                let pastParticipleVal = _pastParticipleInput.val();

                if (_game.inProgress && event.key == "Enter") {
                    if (pastSimpleVal == "" || pastParticipleVal == "") {
                        if (pastSimpleVal == "") {
                            _pastSimpleInput.addClass("is-invalid");
                            setTimeout(function () {
                                _pastSimpleInput.removeClass("is-invalid")
                            }, 1000);
                        }
                        if (pastParticipleVal == "") {
                            _pastParticipleInput.addClass("is-invalid");
                            setTimeout(function () {
                                _pastParticipleInput.removeClass("is-invalid")
                            }, 1000);
                        }

                        return;
                    }
                    else if (_game.IsValidAnswer(pastSimpleVal, pastParticipleVal)) {
                        _scoreSpan.html(++_score);
                        _timer.addSeconds(_timeBonus);

                        displayTimePenalty(_timeBonus);

                        _baseFormInput
                            .addClass("is-valid")
                            .removeClass("is-invalid");
                    }
                    else {
                        _timer.addSeconds(_timePenalty);

                        displayTimePenalty(_timePenalty);

                        _baseFormInput
                            .addClass("is-invalid")
                            .removeClass("is-valid");
                    }

                    ajax_postAnswer(pastSimpleVal, pastParticipleVal, _timer.getTimeStamp());

                    _currentVerb = _game.GetNextVerb();

                    displayNextVerb(_currentVerb.baseForm);
                    displayNextHint(_game.GetNextHint());
                }
            });

            function ajax_newGame() {
                return $.ajax({
                    type: "POST",
                    url: "/EnglishBattle?handler=NewGame",
                    data: {
                        playerId: $("#userId").val(),
                        //startedAt: timestamp
                    },
                    dataType: "json",
                    headers: {
                        RequestVerificationToken:
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        console.log("start success");
                        console.log("game id: " + data.gameId);

                        _game.SetGameId(data.gameId);
                    },
                    error: function (err) {
                        console.log("start error");
                    }
                });
            }

            function ajax_postAnswer(pastSimple, pastParticiple, timestamp) {
                return $.ajax({
                    type: "POST",
                    url: "/EnglishBattle?handler=Answer",
                    data: {
                        answer: {
                            verbId: _currentVerb.id,
                            gameId: _game.gameId,
                            pastSimple: pastSimple,
                            pastParticiple: pastParticiple,
                            answeredAt: timestamp
                        }
                    },
                    dataType: "json",
                    headers: {
                        RequestVerificationToken:
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        console.log("posted answer successfully")
                    },
                    error: function (err) {
                        console.log("error while posting answer");
                    }
                });
            }

            function ajax_gameOver(timestamp) {
                return $.ajax({
                    type: "POST",
                    url: "/EnglishBattle?handler=GameOver",
                    data: {
                        gameId: _game.gameId,
                        startedAt: timestamp
                    },
                    dataType: "json",
                    headers: {
                        RequestVerificationToken:
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        console.log("gameover success");
                    },
                    error: function (err) {
                        console.log("gameover error");
                        console.log(err);
                    }
                });
            }

            function ajax_getIrregularVerbs() {
                return $.ajax({
                    type: "GET",
                    url: "/EnglishBattle?handler=IrregularVerbs",
                    headers: {
                        RequestVerificationToken:
                            $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (data) {
                        console.log("get verbs success");

                        _game.SetVerbs(data.irregularVerbs);
                    },
                    error: function (err) {
                        console.log("get verbs error");
                    }
                });
            }

            function enableInputs(enable) {
                _pastParticipleInput.attr("disabled", !enable);
                _pastSimpleInput.attr("disabled", !enable);
            }

            function displayNextHint(hint) {

                let hintToPrepend = `<div style="opacity: 0.3;">${hint}</div>`;

                $(hintToPrepend).hide().prependTo(_hintListDiv).show("slide", "", 500);

                if (_hintListDiv.children().length > 3) {
                    _hintListDiv.find("div:last").remove();
                }
            }

            function displayTimePenalty(seconds) {
                let color = (seconds > 0) ? "green" : "red";
                let sign = (seconds > 0) ? "+" : "";

                $("#seconds_3").attr("fill", (seconds > 0) ? "white" : color);

                $("#timeBonus")
                    .html(sign + seconds + "s")
                    .css({ "color": color })
                    .show()
                    .animate({
                        "font-size": "2em",
                    }, "fast", function () {
                        $(this).delay(400).animate({
                            "font-size": "0em",
                        }, "slow", function () {
                            $("#seconds_3").attr("fill", "#fff");
                        });
                    });
            }

            function displayNextVerb(verb) {
                _baseFormInput.val(verb);
                _pastSimpleInput.val("");
                _pastParticipleInput.val("")
                    .focus();
            }

            function timeOutHandler() {
                _game.inProgress = false;

                _hintListDiv.animate({ "height": "0em" }, "slow");

                _baseFormInput
                    .removeClass("is-valid")
                    .removeClass("is-invalid");

                ajax_gameOver(_timer.getTimeStamp());

                _playButton.attr("disabled", false);
                _playButton.html("<span>@Game.Start</span>");

                _hintListDiv.empty();

                enableInputs(false);
            }

        });

    </script>

}